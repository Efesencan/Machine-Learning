# -*- coding: utf-8 -*-
"""efesencan_HW4_LinearRegression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JgWEWFyPMS2IbNL2d9r0MHUouUU1iySx

# Load the dataset
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt                   

df = pd.read_csv('https://raw.githubusercontent.com/OpenClassrooms-Student-Center/Evaluate-Improve-Models/master/house_prices.csv')
df.sample(5)

"""# "Garage Area" and "SalesPrice" features are selected to analyze."""

new_df = df[["Garage Area","SalesPrice"]]  # code comes here

"""## Convert the data into numpy arrays of two variables, X and y."""

X = np.array(new_df[["Garage Area"]]) #code comes here
y = np.array(new_df[["SalesPrice"]])  #code comes here 
print(X.shape) # Vewing the shape of X
print(y.shape) # Vewing the shape of y

"""## Split train and test data with 0.2 ratio."""

from sklearn.model_selection import train_test_split
# code comes here
x_train,x_test,y_train,y_test = train_test_split(X,y,test_size = 0.2,random_state = 1)

"""# Linear Regression
Train a linear regression.
"""

from sklearn import linear_model 

# code comes here
regressor = linear_model.LinearRegression()
# code comes here
regressor.fit(x_train,y_train)

"""## Calculate train and test R2."""

from sklearn.metrics import r2_score

# code comes here
x_pred = regressor.predict(x_train)
print("Train:", r2_score(y_train,x_pred))

# code comes here
y_pred = regressor.predict(x_test)
print("Test:", r2_score(y_test,y_pred))

"""## Print the bias and the slope."""

print('Regressor coeffient or slope:',regressor.coef_[0][0])
print('Interception point with axis:',regressor.intercept_[0])

"""## Plot the test set with scatter plot and add the linear regression model line.
Remember linear regression recitation.
"""

# Plot a graph with X_test vs y_test
plt.scatter(x_test,y_test,color="green")
#print(x_test.shape)
#print(y_test.shape)
y_pred = regressor.predict(x_train)
plt.plot(x_train,y_pred,color="red",linewidth=3)
#print(x_train.shape)
#print(y_pred.shape)
plt.title('Regression(Test Set)')
plt.xlabel('Garage Area')
plt.ylabel('Sales Price')
plt.show()
# Regressior line showing

"""# Multiple Linear Regression
Select all features.
"""

X = np.array(df.iloc[:,:-1].values) # code comes here
y = np.array(df.iloc[:,-1:].values)   # code comes here
print(X.shape)       # Vewing the shape of X
print(y.shape)       # Vewing the shape of y

"""## Rescale the input features. Use MinMaxScaler."""

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X = scaler.fit_transform(X) #  code comes here

"""## Train test split."""

x_train, x_test, y_train, y_test = train_test_split(X,y,test_size = 0.2, random_state = 0)# was 1

"""## Fit regression model."""

# code comes here
# code comes here
regressor = linear_model.LinearRegression()
# Fiting the dataset into the model
regressor.fit(x_train,y_train)

"""## Calculate train and test R2."""

# code comes here
x_pred = regressor.predict(x_train)
print("Train:", r2_score(y_train,x_pred))

# code comes here
y_pred = regressor.predict(x_test)
print("Test:", r2_score(y_test,y_pred))

"""## Print the regression coefficients."""

print('Regressor coeffients for multiple linear regression:', regressor.coef_[0])

"""# Ridge Regression
https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html

https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.RidgeCV.html

## Use cross-validation to estimate alpha. Set the fold size to 5.
"""

from sklearn.model_selection import KFold
from sklearn.linear_model import RidgeCV
kfold = KFold(n_splits=5, shuffle=False, random_state=None) # code comes here

alphas=[1e-3, 1e-2, 1e-1, 1, 2, 5, 8, 10]
model_rcv = RidgeCV(alphas = alphas, cv = kfold).fit(x_train,y_train)

# scores = []
# for train_index, test_index in kfold.split(X):
#   #print("TRAIN:", train_index, "TEST:", test_index)
#   X_train_fold, X_test_fold = X[train_index], X[test_index]
#   y_train_fold, y_test_fold = y[train_index], y[test_index]
#   model_rcv = RidgeCV(alphas).fit(X_train_fold,y_train_fold)
#   #scores.append(model_rcv.score(X_train_fold,y_train_fold))
#   scores.append(model_rcv.alpha_)

# print(scores)
#print(scores)
#best_index = scores.index(max(scores))

# Create and fit model
# code comes here
# code comes here

"""## Calculate the train and test R2."""

# code comes here
import statistics 
from statistics import mode
#model_rcv = RidgeCV([mode(scores)]).fit(x_train,y_train)
x_pred = model_rcv.predict(x_train)
print("Train:", r2_score(y_train,x_pred))

# code comes here
y_pred = model_rcv.predict(x_test)
print("Test:", r2_score(y_test,y_pred))

"""## Print the best alpha."""

print("Alpha:", model_rcv.alpha_) #was mode(scores)

"""## Print the regression coefficients."""

print('Regressor coeffients for ridge regression:',model_rcv.coef_[0])# code comes here